# -*- coding: utf-8 -*-
"""utm hackothon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ePE1-wYclwc9-wjaUGDy4xi9cRwQ1T_C
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
from scipy import stats
import seaborn as sns

d1=pd.read_csv('crop_price_data (1).csv')
d2=pd.read_csv('Crop_Yield_Prediction.csv')
data = d1.merge(d2, on='Crop')

df = pd.DataFrame(data)

d1

d2

df

correlation_matrix = df.select_dtypes(include=[np.number]).corr()

plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Crop Data')
plt.show()



X = df.drop(['Price (INR/quintal)'], axis=1)
y = df['Price (INR/quintal)']
X['Date'] = pd.to_datetime(X['Date'])

X['Year'] = X['Date'].dt.year
X['Month'] = X['Date'].dt.month
X['Day'] = X['Date'].dt.day

X = X.drop('Date', axis=1)

categorical_features = ['District', 'Crop', 'Market']


encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')


X_encoded = pd.DataFrame(encoder.fit_transform(X[categorical_features]))

X_encoded.columns = encoder.get_feature_names_out(categorical_features)

X = X.drop(categorical_features, axis=1)
X = pd.concat([X, X_encoded], axis=1)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

linear_model = LinearRegression()

forest_model = RandomForestRegressor(n_estimators=100, random_state=42)


linear_model.fit(X_train, y_train)
forest_model.fit(X_train, y_train)


linear_pred = linear_model.predict(X_test)
forest_pred = forest_model.predict(X_test)

linear_mae = mean_absolute_error(y_test, linear_pred)
forest_mae = mean_absolute_error(y_test, forest_pred)

linear_r2 = r2_score(y_test, linear_pred)
forest_r2 = r2_score(y_test, forest_pred)

print("Linear Regression Results:")
print(f"Mean Absolute Error: {linear_mae}")
print(f"R2 Score: {linear_r2}\n")

print("Random Forest Results:")
print(f"Mean Absolute Error: {forest_mae}")
print(f"R2 Score: {forest_r2}\n")

plt.figure(figsize=(8, 6))
plt.scatter(y_test, linear_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--')  # Add diagonal line
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs. Predicted Prices (Linear Regression)")
plt.show()

plt.scatter(y_test, forest_pred, color='green')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], '--', color='red')
plt.title('Actual vs Predicted Crop Price')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

new_data = {
    'District': ['Ahmednagar'],
    'Crop': ['Bajra'],
    'Market': ['Ahmednagar'],
    'Nitrogen': [100],
    'Phosphorus': [50],
    'Potassium': [30],
    'Temperature': [25],
    'Rainfall': [60],
    'Humidity': [70],
    'pH_Value': [6.5],
    'Year': [2024],
    'Month': [5],
    'Day': [15]
}


new_data_df = pd.DataFrame(new_data)


categorical_features = ['District', 'Crop', 'Market']
new_data_encoded = pd.DataFrame(encoder.transform(new_data_df[categorical_features]))
new_data_encoded.columns = encoder.get_feature_names_out(categorical_features)


new_data_df = new_data_df.drop(categorical_features, axis=1)
new_data_df = pd.concat([new_data_df, new_data_encoded], axis=1)

new_data_df['Yield'] = df['Yield'].mean()


new_data_df = new_data_df[X_train.columns]
predicted_price = forest_model.predict(new_data_df)

print("Predicted Price:", predicted_price[0])

